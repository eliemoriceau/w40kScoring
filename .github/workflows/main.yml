name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  NODE_VERSION: '20'

jobs:
  lint:
    name: Code Linting
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run ESLint
        run: npm run lint

      - name: Check code formatting
        run: npm run format -- --check

  typecheck:
    name: Type Checking
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run TypeScript check
        run: npm run typecheck

  build:
    name: Build Application
    runs-on: ubuntu-latest
    needs: [lint, typecheck]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build application
        run: npm run build

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-files
          path: build/
          retention-days: 1

  test:
    name: Run Tests
    runs-on: ubuntu-latest
    needs: [lint, typecheck]

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: test_user
          POSTGRES_PASSWORD: test_password
          POSTGRES_DB: w40k_scoring_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Generate db for test
        run: |
          mkdir -p tmp
          touch /tmp/

      - name: Setup test environment
        run: |
          cp .env.example .env.test || echo "No .env.example found"
          echo "APP_KEY=VeryLongAndSecureAppKeyForTestingPurposes123456789012345678901234567890" >> .env.test
          echo "DB_HOST=localhost" >> .env.test
          echo "DB_PORT=5432" >> .env.test
          echo "DB_USER=test_user" >> .env.test
          echo "DB_PASSWORD=test_password" >> .env.test
          echo "DB_DATABASE=w40k_scoring_test" >> .env.test
          echo "NODE_ENV=test" >> .env.test

      - name: Run database migrations
        run: npm run build && node ace migration:run --force || echo "No migrations to run"
        env:
          NODE_ENV: test
          APP_KEY: VeryLongAndSecureAppKeyForTestingPurposes123456789012345678901234567890
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: w40k_scoring_test

      - name: Run tests
        run: npm test
        env:
          NODE_ENV: test
          APP_KEY: VeryLongAndSecureAppKeyForTestingPurposes123456789012345678901234567890
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USER: test_user
          DB_PASSWORD: test_password
          DB_DATABASE: w40k_scoring_test

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Run security audit
        run: npm audit --audit-level moderate

      - name: Check for vulnerabilities
        run: npm audit --audit-level high --audit-level critical

  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [lint, typecheck, build, test, security-scan]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          if [[ "${{ needs.lint.result }}" != "success" ]]; then
            echo "❌ Linting failed"
            exit 1
          fi
          if [[ "${{ needs.typecheck.result }}" != "success" ]]; then
            echo "❌ Type checking failed"
            exit 1
          fi
          if [[ "${{ needs.build.result }}" != "success" ]]; then
            echo "❌ Build failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "❌ Tests failed"
            exit 1
          fi
          if [[ "${{ needs.security-scan.result }}" != "success" ]]; then
            echo "❌ Security scan failed"
            exit 1
          fi
          echo "✅ All quality checks passed!"
