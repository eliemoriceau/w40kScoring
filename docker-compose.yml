# ================================
# Docker Compose - w40kScoring
# ================================
# Configuration pour le développement local

version: '3.8'

services:
  # Application AdonisJS
  app:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - '3333:3333'
    environment:
      - NODE_ENV=development
      - HOST=0.0.0.0
      - PORT=3333
      - DB_CONNECTION=pg
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_USER=w40k_user
      - DB_PASSWORD=w40k_password
      - DB_DATABASE=w40k_scoring
      - APP_KEY=base64:REPLACE_WITH_GENERATED_KEY
    depends_on:
      postgres:
        condition: service_healthy
    volumes:
      - ./tmp/logs:/app/tmp/logs
    networks:
      - w40k-network
    restart: unless-stopped

  # Base de données PostgreSQL
  postgres:
    image: postgres:15-alpine
    environment:
      - POSTGRES_USER=w40k_user
      - POSTGRES_PASSWORD=w40k_password
      - POSTGRES_DB=w40k_scoring
    ports:
      - '5432:5432'
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./docker/postgres/init.sql:/docker-entrypoint-initdb.d/init.sql:ro
    healthcheck:
      test: ['CMD-SHELL', 'pg_isready -U w40k_user -d w40k_scoring']
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 10s
    networks:
      - w40k-network
    restart: unless-stopped

  # Redis pour les sessions (optionnel)
  redis:
    image: redis:7-alpine
    ports:
      - '6379:6379'
    volumes:
      - redis_data:/data
    healthcheck:
      test: ['CMD', 'redis-cli', 'ping']
      interval: 10s
      timeout: 3s
      retries: 3
    networks:
      - w40k-network
    restart: unless-stopped

# Volumes persistants
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local

# Réseau dédié
networks:
  w40k-network:
    driver: bridge
